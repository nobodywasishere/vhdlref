<HTML><HEAD>
<!-- HTML file generated by HTML Author Version 5.3 -->
<!-- Unregistered copy -->
<!-- Source File Name: DOC2.DOC -->
<TITLE>VHDL Command Summary</TITLE>
</HEAD>
<BODY BGCOLOR="antiquewhite">
<H1 Align="Center">VHDL Command Summary</H1>
<HR Size=1 Width=100%>
<H2>Concurrrent Statements</H2>
<UL>
<h3>block_statement</h3>
<ul>label:<B> block</B> [(guard_expression)]
<ul>		[generic]<br>
		[ports]<br>
		[declarations]<br></ul>
<B>	begin</B><br>
<ul>		concurrent_statements<br></ul>
<B>	end block</B> [label];

</ul>
<H3>component_instantiation_statement</H3>
<ul>label : name [ <B>generic map</B> (map) ] [ <B>port map</B> (signals) ];</ul>
<H3>concurrent_assertion_statement</H3>
<ul><B>assert</B> condition
<ul>[ <B>report</B> string_expression ]<br>
[ <B>severity </B>{<B>NOTE | WARNING | ERROR | FAILURE</B>} ];</ul></ul>
<H3>concurrent_procedure_call</H3>
<ul>[ label : ] procedure_name [ (parameters) ];</ul>
<H3>concurrent_signal_assignment_statement</H3>
<ul>[ label : ] [ {conditional_assignment | assignment | selected_assignment} ];</ul>
<H3>generate_statement</H3>
<ul>label : [{ <B>for</B> specification | <B>if </B>condition }] <B>generate</B>
<ul>concurrent_statements</ul>
	<B>end</B> <B>generate</B> [label];</ul>
<h3>process_statement</H3>
<ul>[label : ] <B>process</B> [ (sensitivity_list) ]
<ul>[ variable_declaration ]<br>
[ type_declaration ]<br>
[subprogram_declaration ]<br>
[ declarations ]</ul>
<B>	begin</B>
<ul>sequential_statements	-- Cannot contain a <B>wait </B>statement if sensitivity_list is used</ul>
<B>	end process</B> [ label ];</ul>
</ul>
<H2>Sequential Statements</H2>
<ul><H3>assertion_statement</H3>
<ul><B>assert</B> condition			-- When condition is false [strng_expression] is printed
<ul>[ <B>report </B>string_expression ]</br>
[<B>severity</B> { <B>NOTE | WARNING | ERROR | FAILURE</B> } ];</ul>
</ul>
<H3>case_statement</H3>
<ul>	<B>case</B> expression <B>is				-- </B>Avoid the use of parenthesis, if possible<br>
<B>when </B>choices_1 =&gt; sequential_statements<br>
<B>	.<br>
	.<br>
</B>	<B>when</B> choices_n =&gt; sequential_statements<br>
<B>	end case;</B></ul>
<H3>exit_statement</H3>
<ul>	<B>exit</B> [ label ] [ <B>when</B> condition ];</ul>
<H3>if_statement</H3>
<ul>	<B>if</B> condition <B>then</B>
<ul>sequential_statements<br>
{ <B>elsif</B> condition then sequential_statements }<br>
[ <B>else</B> sequential_statements ]</ul>
	<B>end if</B>;</ul>
<H3>loop_statement</H3>
<ul>	[ label : ] [ <B>while</B> condition | <B>for</B> loop_specification ] <B>loop<br>
</B>		sequential_statements<br>
	<B>end loop</B> [ label ] <B>;</B></ul>
<H3>next_statement</H3>
<ul>	<B>next</B> [ label ] [ <B>when</B> condition ]<B>;</B></ul>
<H3>null_statement</H3>
<ul>	<B>null;</B></ul>
<H3>procedure_call_statement</H3>
<ul>	procedure_name [ (parameters) ] <B>;</B></ul>
<H3>return_statement</H3>
<ul>	<B>return</B> expression;			--For use in a Function<br>
<B>	return;					</B>--For use in a Procedure</ul>
<H3>signal_assignment_statement</H3>
<ul>	target <B>&lt;=</B> expression [ <B>after</B>  time_expression ]<br>
<B>	.<br>
	.<br>
</B>	{<B> ,</B> expression  [ <B>after</B>  time_expression ]<B>;</B></ul>
<H3>variable_assignment_statement</H3>
<ul>	target <B>:= </B>expression <B>;</B></ul>
<H3>wait_statement</H3>
<ul>	<B>wait					</B>--A Function may not contain a wait_statement
<ul>		[ <B>on</B> signal_name {, signal_name} ]<br>
		[ <B>until </B>conditional_expression ]<br>
		[ <B>for</B> time_expression ]<B> ;</B></ul>
</ul>
</ul>
<H2>Specifications</H2>
<ul>
<H3>attribute_specification</H3>
<ul>	<B>attribute</B> attribute_name<br>
		<B>of</B> entity_name is expression <B>;</B></ul>
<H3>configuration_specifications</H3>
<ul>	<B>for</B> component_name<br>
	<B>use</B> [ generic_map_part ]<ul>
		[port_map_part]<B> ;</B></ul>
</ul>
</ul>
<H2>Library &amp; Use Clause</H2>
<ul>
<H3>library_clause</H3>
<ul>	<B>LIBRARY</B> names <B>;</B></ul>
<H3>use_clause</H3>
<ul>	<B>USE</B> selected_names<B> ;</B></ul>
</ul>
<H2>Declarations</H2>
<ul>
<H3>alias_declaration</H3>
<ul>	<B>alias</B> name1 : type [ (indexes) ] <B>is</B> name2 [ (indexes) ] <B>;</B></ul>
<H3>attribute_declaration</H3>
<ul>	<B>attribute</B> name<B> :</B> type <B>;</B></ul>
<H3>component_declaration</H3>
<ul>	<B>component</B> identifier :<br>
		[ <B>generic</B> (generic_list) <B>;</B> ]<br>
		[ <B>port</B> (port_list) ; ]<br>
<B>	end component ;</B></ul>
<H3>constant_declaration</H3>
<ul>	<B>constant</B> name <B>:</B> type <B>:= </B>expression <B>;<br>
</B>	<B>constant</B> name <B>:</B> array_type [ (indexes) ] <B>:= </B>expression<B> ;</B></ul>
<H3>file_declaration</H3>
<ul>	<B>file</B> name<B> :</B> type <B>is</B> [ mode ] logical_name <B>;</B></ul>
<H3>signal_declaration</H3>
<ul>	<B>signal</B> names<B> :</B> type [ constraint ] [<B> :=</B> expression ] <B>;</B></ul>
<H3>port_declaration</H3>
<ul>	<B>port</B> ( names <B>:</B> direction type [ <B>:=</B> expression ] [ ; more_signals ] );</ul>
<H3>subprogram_declaration</H3>
<ul>	{ <B>procedure</B> name [ (parameters) ] | <B>function</B> name [ (parameters) ] <B>return</B> type; }</ul>
<H3>sub_program_body</H3>
<ul>	<B>is<ul>
</B>		declarations</ul>
	<B>begin<ul>
</B>		sequential_declarations</ul>
	<B>end</B> [name] ;</ul>
<H3>subtype_declaration</H3>
<ul>	<B>subtype</B> name <B>is</B> [ resolution_function] type [constraint] ;</ul>
<H3>type_declaration</H3>
<ul>	<B>type</B> name <B>is</B> definition<B>;</B></ul>
<H3>variable_declaration</H3>
<P>	<B>variable</B> names <B>: </B>type [ constraint ] [ <B>:=</B> expression ] <B>;</B></P>
</ul>
<H2>Library Units</H2>
<ul>
<H3>architecture_body</H3>
<ul>	<B>architecture</B> name <B>of<br>
	</B>entity_name <B>is<ul>
</B>		[types]<br>
		[constants]<br>
		[signals]<br>
		[subprograms]<br>
		[other declarations]</ul>
	<B>begin<ul>
</B>		concurrent_statements</ul>
	<B>end</B> [name];<br>
	</ul>
<H3>configuration_declaration</H3>
<ul>	<B>configuration</B> name <B>of<br>
	</B>entity_name <B>is<ul>
</B>		declarative_part<br>
		block_configuration</ul>
	<B>end</B> [name];</ul>

<H3>entity_declaration</H3>
<ul>	<B>entity</B> name<B> is<ul>
</B>		[generics] [ports]<br>
		[declarations]</ul>
	[<B>begin</B> statements]		--typically, an entity does not have statements. If it does, the statemnts cannot operate on signals<br>
	<B>end</B> name;</ul>

<H3>package_body </H3>
<ul>	<B>package body</B> name <B>is<ul>
</B>		[subprogram]<br>
		[type]<br>
		[constant	<br>
		[signal]<br>
		[declarations]</ul>
		<B>end </B>[name];<br>
</ul>
<H3>package_declaration</H3>
<P>	<B>package</B> name<B> is<ul>
</B>		[subprogram]<br>
		[type]<br>
		[constant]<br>
		[signal]<br>
		[file]<br>
		[alias]<br>
		[USE clause]<br>
		[declarations]<br>
		<B>end</B> [name];</ul>
</ul>
</BODY></HTML>
