<HTML>
<HEAD>
<TITLE>VHDL Reference Guide - Generate Statement</TITLE>
</HEAD>
<BODY BGCOLOR="mintcream">
<a href="function.htm"><img border=0 src="../../images/left.gif" align=left></a>
<a href="generics.htm"><img border=0 src="../../images/right.gif" align=right></a>

<DIV ALIGN=CENTER>
<TABLE BORDER=0 CELLPADDING=5>
<CAPTION><B>Generate Statement</B></CAPTION>
<TR><TD COLSPAN=3><HR></TD></TR>
<TR>
<TD BGCOLOR="lightcyan">Concurrent Statement</TD>
<TD>---- used in ----></TD>
<TD BGCOLOR="lightgreen">Architecture</TD>
</TR>
</TABLE>

<P><TABLE BORDER=0>
<TR><TD><HR width=150></TD><TD>Syntax</TD><TD><HR width=150></TD></TR>
</TABLE><P>
</DIV>

<DIV ALIGN=center>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=40%>
<TR>
<TD><PRE>label: for parameter in range generate
	concurrent statements
end generate label;
</PRE></TD>
</TR>
</TABLE><P>
</DIV>



<DIV ALIGN=CENTER>
See LRM section 9.7

<P><TABLE BORDER=0 align=center>
<TR><TD><HR width=150></TD><TD>Rules and Examples</TD><TD><HR width=150></TD></TR>
</TABLE><P>
</DIV>

<DIV ALIGN=center>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=80%>
<TR>
<TD>The <b>for ..generate</b> statement isd usually used to instantiate
"arrays" of components. The generate parameter may be used to index
array-type signals associated with component ports:
<PRE>architecture GEN of REG_BANK is
  component REG
    port(D,CLK,RESET : in  std_ulogic;
         Q           : out std_ulogic);
  end component;
begin
   GEN_REG: 
   for I in 0 to 3 generate
      REGX : REG port map
        (DIN(I), CLK, RESET, DOUT(I));
   end generate GEN_REG;
end GEN;
</PRE></TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=center>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=100%>
<TR>
<TD>A label is compulsory with a <b>generate</b> statement.</TD>
<TD>The <b>for ... generate</b> statement is particularily powerful when
used with integer <b>generics</b>.</TD>
</TR>
<TR>
<TD>Instance labels inside a <b>generate</b> statement do <b>not</b>
need to have an index:<pre>
REGX(I):	-- Illegal
</pre></TD>
<TD><b>for .. generate</b> statements may be nested to create
two-dimensional instance "arrays".</TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=center>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=70%>
<TR>
<TD>Another form of <b>generate</b> is the <b>if ... generate</b>
statement. This is usually used within a <b>for .. generate</b>
statement, to account for irregularity. For instance, a ripple-carry
adder with no carry-in:
<PRE>
architecture GEN of RIPPLE is

  component FULLADD
    port (A,B,CIN : in bit;
          SUM, CARRY : out bit);
  end component;

  component HALFADD 
  port(A,B : in bit;
       SUM, CARRY : out bit);
  end component;

  signal C : bit_vector(0 to 7);

begin

  GEN_ADD: for I in 0 to 7 generate

    LOWER_BIT: if I=0 generate
      U0: HALFADD port map
         (A(I),B(I),S(I),C(I));
    end generate LOWER_BIT;

    UPPER_BITS: if I>0 generate
      UX: FULLADD port map
         (A(I),B(I),C(I-1),S(I),C(I));
    end generate UPPER_BITS;

  end generate GEN_ADD;

  COUT <= C(7);

end GEN;
</PRE></TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=CENTER>
<P><TABLE BORDER=0 align=center>
<TR><TD><HR width=150></TD><TD>Synthesis Issues</TD><TD><HR width=150></TD></TR>
</TABLE><P>
</DIV>

Generate statements are usually supported for synthesis.

<DIV ALIGN=CENTER>
<P><TABLE BORDER=0>
<TR><TD><HR width=150></TD><TD>Whats New in '93</TD><TD><HR width=150></TD></TR>
</TABLE><P>

In VHDL-93, a generate statement may contain local declarations,
followed by the kjeyword <b>begin</b>.

</DIV>

<HR WIDTH="80%">
<div align=center>
<a href="function.htm"><img border=0 src="../../images/left.gif"></a>
<a href="index.htm"><img border=0 src="../../images/up.gif"></a>
<a href="generics.htm"><img border=0 src="../../images/right.gif"></a>
</div>

<HR WIDTH="80%">
<ADDRESS>
<CENTER>
This page maintained by <A HREF="mailto:dave@truechap.demon.co.uk">
<IMG SRC="/images/emailed.gif" BORDER=0>
Dave Trueman</A>
</CENTER>
</ADDRESS>
<HR WIDTH="80%">
</BODY>
</HTML>
