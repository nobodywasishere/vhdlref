<HTML>
<HEAD>
<TITLE>VHDL Reference Guide - Variable Assignment</TITLE>
</HEAD>
<BODY BGCOLOR="mintcream">

<a href="var_dec.htm"><img border=0 src="../../images/left.gif" align=left></a>
<a href="waits.htm"><img border=0 src="../../images/right.gif"align=right></a>

<DIV ALIGN=CENTER>
<TABLE BORDER=0 CELLPADDING=5>
<CAPTION><B>Variable Assignment</B></CAPTION>
<TR><TD COLSPAN=3><HR></TD></TR>
<TR>
<TD BGCOLOR="lightcyan">Sequential Statement</TD>
<TD>---- used in ----></TD>
<TD BGCOLOR="lightgreen">Process<br>Procedure<br>Function</TD>
</TR>
</TABLE>

<P><TABLE BORDER=0>
<TR><TD><HR width=150></TD><TD>Syntax</TD><TD><HR width=150></TD></TR>
</TABLE><P>
</DIV>

<DIV ALIGN=CENTER>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=40%>
<TR>
<TD><PRE>variable_name := expression;</PRE></TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=CENTER>
See LRM section 8.4

<P><TABLE BORDER=0 align=center>
<TR><TD><HR width=150></TD><TD>Rules and Examples</TD><TD><HR width=150></TD></TR>
</TABLE><P>
</DIV>

<DIV ALIGN=left>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=60%>
<TR>
<TD>Assignments may be made from signals to variables and vice-versa,
providing the types match:
<PRE>process (A, B, C, SEL)
  variable X : integer range 0 to 7;
begin
  if SEL = '1' then
    X := B;
  else
    X := C;
  end if;
    Z <= A + X;
end process;</PRE></TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=center>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=70%>
<TR>
<TD colspan=2>A variable assignment takes effect immediately:
<PRE>architecture EX1 of V is
  signal A,B,Y,Z : integer;
begin
  process (A, B) 
    variable M, N : integer;
  begin
    M := A;
    N := B;
    Z <= M + N;
    M := 2*A;
    Y <= M + N;
  end process;
end EX1;</PRE></TD>
</TR>
<TR>
<TD width=50%>&nbsp;</TD>
<TD rowspan=2>An equivalent architecture with concurrent signal assignments<PRE>
architecture EX2 of V is
  signal A,B,Y,Z:integer;
begin
  Z <= A + B;
  Y <= 2*A + B;
end EX2;</PRE></TD>
</TR>
<TR>
<TD>A variable assignment may not be given a delay.</TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=center>
<TABLE BORDER=1 CELLPADDING=5 WIDTH=70%>
<TR>
<TD>A variable in a process can act as a register, if it is read before
it has been written to, since it retains its value between sucessive
process activations.
<PRE>process (CLK)
   variable Q : std_ulogic;
begin
  if CLK'event and CLK='1' then
    PULSE <= D and not(Q);
    Q := D;
    -- PULSE and Q act as registers
  end if;
end process;</PRE></TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=CENTER>
<P><TABLE BORDER=0 align=center>
<TR><TD><HR width=150></TD><TD>Synthesis Issues</TD><TD><HR width=150></TD></TR>
</TABLE><P>
</DIV>

<DIV ALIGN=CENTER>
<TABLE BORDER=0 CELLPADDING=5 WIDTH=70%>
<TR>
<TD>Variable assignments are generally synthesisable, providing they use
types and operators acceptable to the synthesis tool.
<p>
In a "clocked process", each variable which has its value read before it
has had an assignment to it will be synthesised as the output of a
register.
<p>
In a "combinational process", reading a variable before it has had an
assignment may cause a latch to be synthesised.
<p>
Variables declared in a subprogram are synthesised as combinational
logic.
</TD>
</TR>
</TABLE><P>
</DIV>

<DIV ALIGN=CENTER>
<P><TABLE BORDER=0>
<TR><TD><HR width=150></TD><TD>Whats New in '93</TD><TD><HR width=150></TD></TR>
</TABLE><P>

In VHDL-93, a variable assignment may have a label:
<PRE>label: variable_name := expression;</PRE>
VHDL-93 supports <b>shared variables</b> which may be accessed by more
than one process.However, the language does not define what happens if
two or more processes make conflicting accesses to a shared variable at
the same time. 

</DIV>

<HR WIDTH="80%">
<div align=center>
<a href="var_dec.htm"><img border=0 src="../../images/left.gif"></a>
<a href="index.htm"><img border=0 src="../../images/up.gif"></a>
<a href="waits.htm"><img border=0 src="../../images/right.gif"></a>
</div>

<HR WIDTH="80%">
<ADDRESS>
<CENTER>
This page maintained by <A HREF="mailto:dave@truechap.demon.co.uk">
<IMG SRC="/images/emailed.gif" BORDER=0>
Dave Trueman</A>
</CENTER>
</ADDRESS>
<HR WIDTH="80%">
</BODY>
</HTML>
